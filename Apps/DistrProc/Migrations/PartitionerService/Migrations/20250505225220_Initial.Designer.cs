// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Softellect.Migrations.PartitionerService;

#nullable disable

namespace Softellect.Migrations.PartitionerService.Migrations
{
    [DbContext(typeof(PartitionerDbContext))]
    [Migration("20250505225220_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Softellect.Migrations.Common.DeliveryType", b =>
                {
                    b.Property<int>("DeliveryTypeId")
                        .HasColumnType("int")
                        .HasColumnName("deliveryTypeId");

                    b.Property<string>("DeliveryTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("deliveryTypeName");

                    b.HasKey("DeliveryTypeId");

                    b.ToTable("DeliveryType");
                });

            modelBuilder.Entity("Softellect.Migrations.Common.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("messageId");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdOn");

                    b.Property<int>("DataVersion")
                        .HasColumnType("int")
                        .HasColumnName("dataVersion");

                    b.Property<int>("DeliveryTypeId")
                        .HasColumnType("int")
                        .HasColumnName("deliveryTypeId");

                    b.Property<byte[]>("MessageData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("messageData");

                    b.Property<long>("MessageOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("messageOrder");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MessageOrder"));

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recipientId");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("senderId");

                    b.HasKey("MessageId");

                    b.HasIndex("DeliveryTypeId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Softellect.Migrations.PartitionerService.ModelData", b =>
                {
                    b.Property<Guid>("RunQueueId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("runQueueId");

                    b.Property<byte[]>("ModelDataBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("modelData");

                    b.HasKey("RunQueueId");

                    b.ToTable("ModelData");
                });

            modelBuilder.Entity("Softellect.Migrations.PartitionerService.NotificationType", b =>
                {
                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("notificationTypeId");

                    b.Property<string>("NotificationTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("notificationTypeName");

                    b.HasKey("NotificationTypeId");

                    b.HasIndex("NotificationTypeName")
                        .IsUnique();

                    b.ToTable("NotificationType");
                });

            modelBuilder.Entity("Softellect.Migrations.PartitionerService.RunQueue", b =>
                {
                    b.Property<Guid>("RunQueueId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("runQueueId");

                    b.Property<long>("CallCount")
                        .HasColumnType("bigint")
                        .HasColumnName("callCount");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdOn");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("errorMessage");

                    b.Property<decimal>("EvolutionTime")
                        .HasPrecision(38, 16)
                        .HasColumnType("decimal(38,16)")
                        .HasColumnName("evolutionTime");

                    b.Property<DateTime?>("LastErrorOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("lastErrorOn");

                    b.Property<int>("MaxRetries")
                        .HasColumnType("int")
                        .HasColumnName("maxRetries");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("modifiedOn");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("notificationTypeId");

                    b.Property<int?>("ProcessId")
                        .HasColumnType("int")
                        .HasColumnName("processId");

                    b.Property<decimal>("Progress")
                        .HasPrecision(38, 16)
                        .HasColumnType("decimal(38,16)")
                        .HasColumnName("progress");

                    b.Property<string>("ProgressData")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("progressData");

                    b.Property<float>("RelativeInvariant")
                        .HasColumnType("real")
                        .HasColumnName("relativeInvariant");

                    b.Property<int>("RetryCount")
                        .HasColumnType("int")
                        .HasColumnName("retryCount");

                    b.Property<long>("RunQueueOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("runQueueOrder");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RunQueueOrder"));

                    b.Property<int>("RunQueueStatusId")
                        .HasColumnType("int")
                        .HasColumnName("runQueueStatusId");

                    b.Property<Guid>("SolverId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("solverId");

                    b.Property<DateTime?>("StartedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("startedOn");

                    b.Property<Guid?>("WorkerNodeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("workerNodeId");

                    b.HasKey("RunQueueId");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("RunQueueStatusId");

                    b.HasIndex("SolverId");

                    b.HasIndex("WorkerNodeId");

                    b.ToTable("RunQueue");
                });

            modelBuilder.Entity("Softellect.Migrations.PartitionerService.RunQueueStatus", b =>
                {
                    b.Property<int>("RunQueueStatusId")
                        .HasColumnType("int")
                        .HasColumnName("runQueueStatusId");

                    b.Property<string>("RunQueueStatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("runQueueStatusName");

                    b.HasKey("RunQueueStatusId");

                    b.HasIndex("RunQueueStatusName")
                        .IsUnique();

                    b.ToTable("RunQueueStatus");
                });

            modelBuilder.Entity("Softellect.Migrations.PartitionerService.Setting", b =>
                {
                    b.Property<string>("SettingName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("settingName");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdOn");

                    b.Property<byte[]>("SettingBinary")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("settingBinary");

                    b.Property<bool?>("SettingBool")
                        .HasColumnType("bit")
                        .HasColumnName("settingBool");

                    b.Property<Guid?>("SettingGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("settingGuid");

                    b.Property<long?>("SettingLong")
                        .HasColumnType("bigint")
                        .HasColumnName("settingLong");

                    b.Property<string>("SettingText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("settingText");

                    b.HasKey("SettingName");

                    b.HasIndex("SettingName")
                        .IsUnique();

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("Softellect.Migrations.PartitionerService.Solver", b =>
                {
                    b.Property<Guid>("SolverId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("solverId");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdOn");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsInactive")
                        .HasColumnType("bit")
                        .HasColumnName("isInactive");

                    b.Property<byte[]>("SolverData")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("solverData");

                    b.Property<string>("SolverHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("solverHash");

                    b.Property<string>("SolverName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("solverName");

                    b.Property<long>("SolverOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("solverOrder");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SolverOrder"));

                    b.HasKey("SolverId");

                    b.HasIndex("SolverName")
                        .IsUnique();

                    b.ToTable("Solver");
                });

            modelBuilder.Entity("Softellect.Migrations.PartitionerService.WorkerNode", b =>
                {
                    b.Property<Guid>("WorkerNodeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("workerNodeId");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdOn");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsInactive")
                        .HasColumnType("bit")
                        .HasColumnName("isInactive");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("modifiedOn");

                    b.Property<int>("NodePriority")
                        .HasColumnType("int")
                        .HasColumnName("nodePriority");

                    b.Property<int>("NumberOfCores")
                        .HasColumnType("int")
                        .HasColumnName("numberOfCores");

                    b.Property<string>("WorkerNodeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("workerNodeName");

                    b.Property<long>("WorkerNodeOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("workerNodeOrder");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WorkerNodeOrder"));

                    b.Property<byte[]>("WorkerNodePublicKey")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("workerNodePublicKey");

                    b.HasKey("WorkerNodeId");

                    b.HasIndex("WorkerNodeName")
                        .IsUnique();

                    b.HasIndex("WorkerNodeOrder")
                        .IsUnique();

                    b.ToTable("WorkerNode");
                });

            modelBuilder.Entity("Softellect.Migrations.PartitionerService.WorkerNodeSolver", b =>
                {
                    b.Property<Guid>("WorkerNodeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("workerNodeId");

                    b.Property<Guid>("SolverId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("solverId");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdOn");

                    b.Property<string>("DeploymentError")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deploymentError");

                    b.Property<bool>("IsDeployed")
                        .HasColumnType("bit")
                        .HasColumnName("isDeployed");

                    b.HasKey("WorkerNodeId", "SolverId");

                    b.HasIndex("SolverId");

                    b.ToTable("WorkerNodeSolver");
                });

            modelBuilder.Entity("Softellect.Migrations.Common.Message", b =>
                {
                    b.HasOne("Softellect.Migrations.Common.DeliveryType", "DeliveryType")
                        .WithMany("Messages")
                        .HasForeignKey("DeliveryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryType");
                });

            modelBuilder.Entity("Softellect.Migrations.PartitionerService.ModelData", b =>
                {
                    b.HasOne("Softellect.Migrations.PartitionerService.RunQueue", "RunQueue")
                        .WithOne("ModelData")
                        .HasForeignKey("Softellect.Migrations.PartitionerService.ModelData", "RunQueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RunQueue");
                });

            modelBuilder.Entity("Softellect.Migrations.PartitionerService.RunQueue", b =>
                {
                    b.HasOne("Softellect.Migrations.PartitionerService.NotificationType", "NotificationType")
                        .WithMany("RunQueues")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Softellect.Migrations.PartitionerService.RunQueueStatus", "RunQueueStatus")
                        .WithMany("RunQueues")
                        .HasForeignKey("RunQueueStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Softellect.Migrations.PartitionerService.Solver", "Solver")
                        .WithMany("RunQueues")
                        .HasForeignKey("SolverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Softellect.Migrations.PartitionerService.WorkerNode", "WorkerNode")
                        .WithMany("RunQueues")
                        .HasForeignKey("WorkerNodeId");

                    b.Navigation("NotificationType");

                    b.Navigation("RunQueueStatus");

                    b.Navigation("Solver");

                    b.Navigation("WorkerNode");
                });

            modelBuilder.Entity("Softellect.Migrations.PartitionerService.WorkerNodeSolver", b =>
                {
                    b.HasOne("Softellect.Migrations.PartitionerService.Solver", "Solver")
                        .WithMany("WorkerNodeSolvers")
                        .HasForeignKey("SolverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Softellect.Migrations.PartitionerService.WorkerNode", "WorkerNode")
                        .WithMany("WorkerNodeSolvers")
                        .HasForeignKey("WorkerNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Solver");

                    b.Navigation("WorkerNode");
                });

            modelBuilder.Entity("Softellect.Migrations.Common.DeliveryType", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Softellect.Migrations.PartitionerService.NotificationType", b =>
                {
                    b.Navigation("RunQueues");
                });

            modelBuilder.Entity("Softellect.Migrations.PartitionerService.RunQueue", b =>
                {
                    b.Navigation("ModelData");
                });

            modelBuilder.Entity("Softellect.Migrations.PartitionerService.RunQueueStatus", b =>
                {
                    b.Navigation("RunQueues");
                });

            modelBuilder.Entity("Softellect.Migrations.PartitionerService.Solver", b =>
                {
                    b.Navigation("RunQueues");

                    b.Navigation("WorkerNodeSolvers");
                });

            modelBuilder.Entity("Softellect.Migrations.PartitionerService.WorkerNode", b =>
                {
                    b.Navigation("RunQueues");

                    b.Navigation("WorkerNodeSolvers");
                });
#pragma warning restore 612, 618
        }
    }
}
